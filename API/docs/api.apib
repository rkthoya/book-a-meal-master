FORMAT: 1A
HOST: 

#Book A Meal

Book a meal is a marketplace platform which allows caterer(s)
to post menus of available meals and customers to book meals on the same
platform. This is the RESTful API documentation for this project.

Note that this API **expects** the data posted to it to be in JSON format. 
Therefore the following header has to be included:
```
Content-Type: application/json
```
Also, for any of the protected endpoints the following header must be 
included:
```
Authorization: Bearer + <token>
```
The `<token>` in this case is the `access_token` that will be received
after the user has been successfully authenticated.

# Group Authentication

## Sign Up [/auth/signup]

### Create Account[POST]

Create a new user account. The new account will have the role of a
customer until made a caterer by the default administrator.

+ Request (application/json)

        {
            "username": "John Doe",
            "email": "john@doe.com",
            "password": "jane-doe"
            "confirm_password": "jane-doe"
        }

+ Response 201 (application/json)

        {
            "id": 1,
            "username": "John Doe",
            "email": "john@doe.com",
            "created_at": "2020-04-30 13:00:32.257303",
            "updated_at": "2020-04-30 13:00:32.257303"
        }

## Login [/auth/login]

### Sign In [POST]

A user can sign in with their email and password. After signing in, the
user is redirected to their home page depending on their role. This is 
either as a CATERER or as a CUSTOMER.

Authentication has been implemented using JWT and therefore for any 
previleged routes, the `Authorization: Bearer + token` header is 
required.

+ Request (application/json)

        {
            "email": "john@doe.com",
            "password": "jane-doe"
        }

+ Response 200 (application/json)

        {
            "access_token": "<token-here>",
            "user": {
                "id": 1,
                "username": "John Doe",
                "email": "john@doe.com",
            }
        }

## Logout [/auth/logout]

### Sign Out [POST]

This will allow the user to logout of the application. 

+ Request (application/json)

+ Response 200 (application/json)
    
        {
            "message": "Successfully logged out"
        }


# Group Meals

## Meals Endpoint [/meals]

### Create Meal [POST]

This will create a meal. 

**Note**: The authentication header is required. The user logged in should also
be a caterer.

+ Request (application/json)

        {
            "name": "ugali",
            "cost": 30.0,
        }

+ Response 201 (application/json)
    
        {
            "id": 1,
            "name": "ugali",
            "cost": 30.0,
            "created_at": "2020-04-30 13:00:32.257303",
            "updated_at": "2020-04-30 13:00:32.257303"
        }


### Get Meals [GET]

This gets all the meals created by the caterer. 

**Note**: The authentication header is required. The user logged in should also
be a caterer.

+ Request (application/json)
        

+ Response 200 (application/json)

        {
            "num_objects": 2,
            "objects": [
                {
                    "id": 1,
                    "name": "ugali",
                    "cost": 30.0,
                    "created_at": "2020-04-30 13:00:32.257303",
                    "updated_at": "2020-04-30 13:00:32.257303"
                },
                {
                    "id": 2,
                    "name": "beef",
                    "cost": 300.0,
                    "created_at": "2020-04-30 13:00:32.257303",
                    "updated_at": "2020-04-30 13:00:32.257303"
                },
            ]
        }


## Meal Endpoint [/meals/{id}]

### Update Meal [PATCH]

This will update the meal with the given id.

+ Request (application/json)

        {
            "name": "ugali",
            "cost": 30.0,
        }

+ Response 200 (application/json)
    
        {
            "message": "Updated successfully"
        }

### Delete Meal [DELETE]

This will delete the meal with the given id.


+ Request (application/json)

+ Response 200 (application/json)
    
        {
            "messsage": "Successfully deleted"
        }


### Get Meal [GET]

This will get and return the meal specified by the given id.

+ Request (application/json)

+ Response 200 (application/json)

        {
            "id": 1,
            "name": "ugali",
            "cost": 30.0,
            "created_at": "2020-04-30 13:00:32.257303",
            "updated_at": "2020-04-30 13:00:32.257303"
        }


# Group Menus

## Menus Endpoint [/menu]

### Create Menu [POST]

This will create a menu. A menu will only require a category.

The valid categories include:

| Category | Code |
|----------|------|
| Lunch | 1 |
| Supper | 2 |
| Breakfast | 3|



**Note**: The authentication header is required. The user logged in should also
be a caterer.

+ Request (application/json)

        {
            "category": 1
        }

+ Response 201 (application/json)
    
        {
            "id": 1,
            "category": 1,
            "created_at": "2020-04-30 13:00:32.257303",
            "updated_at": "2020-04-30 13:00:32.257303"
        }


### Get Menu [GET]

This gets all the menus created by the caterer. 

**Note**: The authentication header is required. 

+ Request (application/json)
        

+ Response 200 (application/json)

        {
            "num_objects": 2,
            "objects": [
                {
                    "id": 1,
                    "category": 1,
                    "created_at": "2020-04-30 13:00:32.257303",
                    "updated_at": "2020-04-30 13:00:32.257303"
                },
                {
                    "id": 2,
                    "category": 1,
                    "created_at": "2020-04-30 13:00:32.257303",
                    "updated_at": "2020-04-30 13:00:32.257303"
                }
            ]
        }


## Menu Endpoint [/menus/{id}]

### Update Menu [PATCH]

This will update the menu with the given id.

+ Request (application/json)

        {
            "meal_id": 1,
            "category": 2,
        }

+ Response 200 (application/json)
    
        {
            "message": "Updated successfully"
        }

### Delete Menu [DELETE]

This will delete the menu with the given id.


+ Request (application/json)

+ Response 200 (application/json)
    
        {
            "messsage": "Successfully deleted"
        }


### Get Menu [GET]

This will get and return the menu specified by the given id.

+ Request (application/json)

+ Response 200 (application/json)

        {
            "id": 1,
            "meal_id": 1,
            "category": 2,
            "created_at": "2020-04-30 13:00:32.257303",
            "updated_at": "2020-04-30 13:00:32.257303"
        }

# Group Menu Items

## Menu Items Endpoint [/menu_items]

### Create Menu Item [POST]

This will create a menu item. For a menu item to be created, it will require
the existence of menu and a meal.


**Note**: The authentication header is required. The user logged in should also
be a caterer.

+ Request (application/json)

        {
            "meal_id": 1,
            "menu_id": 1
        }

+ Response 201 (application/json)
    
        {
            "id": 1,
            "meal_id": 1,
            "menu_id": 1,
            "created_at": "2020-04-30 13:00:32.257303",
            "updated_at": "2020-04-30 13:00:32.257303"
        }


### Get Menu Items [GET]

This gets all the menu items created by the caterer. 

**Note**: The authentication header is required. 

+ Request (application/json)
        

+ Response 200 (application/json)

        {
            "num_objects": 2,
            "objects": [
                {
                    "id": 1,
                    "meal_id": 1,
                    "menu_id": 1,
                    "created_at": "2020-04-30 13:00:32.257303",
                    "updated_at": "2020-04-30 13:00:32.257303"
                },
                {
                    "id": 2,
                    "meal_id": 1,
                    "menu_id": 2,
                    "created_at": "2020-04-30 13:00:32.257303",
                    "updated_at": "2020-04-30 13:00:32.257303"
                }
            ]
        }


## Menu Item Endpoint [/menu_items/{id}]

### Update Menu [PATCH]

This will update the menu item with the given id.

**Note**: The authentication header is required. The user logged in should also
be a caterer.

+ Request (application/json)

        {
            "meal_id": 1,
            "menu_id": 1
        }

+ Response 200 (application/json)
    
        {
            "message": "Updated successfully"
        }

### Delete Menu Item [DELETE]

This will delete the menu item with the given id.

**Note**: The authentication header is required. The user logged in should also
be a caterer.

+ Request (application/json)

+ Response 200 (application/json)
    
        {
            "messsage": "Successfully deleted"
        }


### Get Menu Item [GET]

This will get and return the menu item specified by the given id.

+ Request (application/json)

+ Response 200 (application/json)

        {
            "id": 1,
            "meal_id": 1,
            "menu_id": 1,
            "created_at": "2020-04-30 13:00:32.257303",
            "updated_at": "2020-04-30 13:00:32.257303"
        }


# Group Orders

## Orders Endpoint [/orders]

### Create Order [POST]

This will create a order. For an order to be created, it will require a menu as 
well as the id of the user creating the order.

**Note**: The authentication header is required. 

+ Request (application/json)

        {
            "menu_item_id": 1,
            "user_id": 1
        }

+ Response 201 (application/json)
    
        {
            "id": 1,
            "menu_item_id": 1,
            "user_id": 1,
            "created_at": "2020-04-30 13:00:32.257303",
            "updated_at": "2020-04-30 13:00:32.257303"
        }


### Get Orders [GET]

This gets all the meals created by the caterer. 

**Note**: The authentication header is required. The result will be based
on the logged in user. If the user is an admin, he/she will access all orders.
Otherwise, the user will access his/her orders.

+ Request (application/json)
        

+ Response 200 (application/json)

        {
            "num_objects": 2,
            "objects": [
                {
                    "id": 1,
                    "menu_item_id": 1,
                    "user_id": 1,
                    "created_at": "2020-04-30 13:00:32.257303",
                    "updated_at": "2020-04-30 13:00:32.257303"
                },
                {
                    "id": 2,
                    "menu_item_id": 1,
                    "user_id": 1,
                    "created_at": "2020-04-30 13:00:32.257303",
                    "updated_at": "2020-04-30 13:00:32.257303"
                }
            ]
        }


## Order Endpoint [/orders/{id}]

### Update Order [PATCH]

This will update the order with the given id.

+ Request (application/json)

        {
            "menu_item_id": 1,
            "user_id": 2,
        }

+ Response 200 (application/json)
    
        {
            "message": "Updated successfully"
        }

### Delete Order [DELETE]

This will delete the order with the given id.


+ Request (application/json)

+ Response 200 (application/json)
    
        {
            "messsage": "Successfully deleted"
        }



### Get Order [GET]

This will get and return the order specified by the given id.

+ Request (application/json)

+ Response 200 (application/json)

        {
            "id": 1,
            "menu_item_id": 1,
            "user_id": 2,
            "created_at": "2020-04-30 13:00:32.257303",
            "updated_at": "2020-04-30 13:00:32.257303"
        }

# Group Notifications

## Notifications Endpoint [/notifications]

### Create Notification [POST]

This will create a notificaiton. For a notification to be created, it requires a user 
id.

**Note**: The authentication header is required. The user will be required to be a
caterer.

+ Request (application/json)

        {
            "user_id": 1,
            "title": "Menu Updated",
            "message": "Hello, the menu has now been updated",
        }

+ Response 201 (application/json)
    
        {
            "id": 1,
            "user_id": 1,
            "title": "Menu Updated",
            "message": "Hello, the menu has now been updated",
            "created_at": "2020-04-30 13:00:32.257303",
            "updated_at": "2020-04-30 13:00:32.257303"
        }


### Get Notifications [GET]

This gets all the notifications created by the caterer.

**Note**: The authentication header is required. 

+ Request (application/json)
        

+ Response 200 (application/json)

        {
            "num_objects": 2,
            "objects": [
                {
                    "id": 1,
                    "user_id": 1,
                    "title": "Menu Updated",
                    "message": "Hello, the menu has now been updated",
                    "created_at": "2020-04-30 13:00:32.257303",
                    "updated_at": "2020-04-30 13:00:32.257303"
                },
                {
                    "id": 2,
                    "user_id": 1,
                    "title": "New Meal Created",
                    "message": "This is to inform you of a new meal id: 53",
                    "created_at": "2020-04-30 13:00:32.257303",
                    "updated_at": "2020-04-30 13:00:32.257303"
                }
            ]
        }


## Notification Endpoint [/notifications/{id}]

### Update Notification [PATCH]

This will update the notification with the given id.

+ Request (application/json)

        {
            "user_id": 1,
            "title": "Menu Updated",
            "message": "Hello, the menu has now been updated",
        }

+ Response 200 (application/json)
    
        {
            "message": "Updated successfully"
        }

### Delete Notification [DELETE]

This will delete the notification with the given id.


+ Request (application/json)

+ Response 200 (application/json)
    
        {
            "messsage": "Successfully deleted"
        }


### Get Notification [GET]

This will get and return the notification specified by the given id.

+ Request (application/json)

+ Response 200 (application/json)

        {
            "id": 1,
            "user_id": 1,
            "title": "Menu Updated",
            "message": "Hello, the menu has now been updated",
            "created_at": "2020-04-30 13:00:32.257303",
            "updated_at": "2020-04-30 13:00:32.257303"
        }
